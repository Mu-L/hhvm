/**
 * Autogenerated by Thrift
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.Set;
import java.util.HashSet;
import java.util.Collections;
import java.util.BitSet;
import java.util.Arrays;
import com.facebook.thrift.*;
import com.facebook.thrift.annotations.*;
import com.facebook.thrift.async.*;
import com.facebook.thrift.meta_data.*;
import com.facebook.thrift.server.*;
import com.facebook.thrift.transport.*;
import com.facebook.thrift.protocol.*;

@SuppressWarnings({ "unused", "serial" })
public class TestStruct implements TBase, java.io.Serializable, Cloneable, Comparable<TestStruct> {
  private static final TStruct STRUCT_DESC = new TStruct("TestStruct");
  private static final TField UNQUALIFIED_INT_FIELD_FIELD_DESC = new TField("unqualified_int_field", TType.I32, (short)1);
  private static final TField UNQUALIFIED_BOOL_FIELD_FIELD_DESC = new TField("unqualified_bool_field", TType.BOOL, (short)2);
  private static final TField UNQUALIFIED_LIST_FIELD_FIELD_DESC = new TField("unqualified_list_field", TType.LIST, (short)3);
  private static final TField UNQUALIFIED_STRUCT_FIELD_FIELD_DESC = new TField("unqualified_struct_field", TType.STRUCT, (short)4);
  private static final TField OPTIONAL_INT_FIELD_FIELD_DESC = new TField("optional_int_field", TType.I32, (short)5);
  private static final TField OPTIONAL_BOOL_FIELD_FIELD_DESC = new TField("optional_bool_field", TType.BOOL, (short)6);
  private static final TField OPTIONAL_LIST_FIELD_FIELD_DESC = new TField("optional_list_field", TType.LIST, (short)7);
  private static final TField OPTIONAL_STRUCT_FIELD_FIELD_DESC = new TField("optional_struct_field", TType.STRUCT, (short)8);

  public int unqualified_int_field;
  public boolean unqualified_bool_field;
  public List<Integer> unqualified_list_field;
  public EmptyStruct unqualified_struct_field;
  public int optional_int_field;
  public boolean optional_bool_field;
  public List<Integer> optional_list_field;
  public EmptyStruct optional_struct_field;
  public static final int UNQUALIFIED_INT_FIELD = 1;
  public static final int UNQUALIFIED_BOOL_FIELD = 2;
  public static final int UNQUALIFIED_LIST_FIELD = 3;
  public static final int UNQUALIFIED_STRUCT_FIELD = 4;
  public static final int OPTIONAL_INT_FIELD = 5;
  public static final int OPTIONAL_BOOL_FIELD = 6;
  public static final int OPTIONAL_LIST_FIELD = 7;
  public static final int OPTIONAL_STRUCT_FIELD = 8;

  // isset id assignments
  private static final int __UNQUALIFIED_INT_FIELD_ISSET_ID = 0;
  private static final int __UNQUALIFIED_BOOL_FIELD_ISSET_ID = 1;
  private static final int __OPTIONAL_INT_FIELD_ISSET_ID = 2;
  private static final int __OPTIONAL_BOOL_FIELD_ISSET_ID = 3;
  private BitSet __isset_bit_vector = new BitSet(4);

  public static final Map<Integer, FieldMetaData> metaDataMap;

  static {
    Map<Integer, FieldMetaData> tmpMetaDataMap = new HashMap<Integer, FieldMetaData>();
    tmpMetaDataMap.put(UNQUALIFIED_INT_FIELD, new FieldMetaData("unqualified_int_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(UNQUALIFIED_BOOL_FIELD, new FieldMetaData("unqualified_bool_field", TFieldRequirementType.DEFAULT, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(UNQUALIFIED_LIST_FIELD, new FieldMetaData("unqualified_list_field", TFieldRequirementType.DEFAULT, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(UNQUALIFIED_STRUCT_FIELD, new FieldMetaData("unqualified_struct_field", TFieldRequirementType.DEFAULT, 
        new StructMetaData(TType.STRUCT, EmptyStruct.class)));
    tmpMetaDataMap.put(OPTIONAL_INT_FIELD, new FieldMetaData("optional_int_field", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.I32)));
    tmpMetaDataMap.put(OPTIONAL_BOOL_FIELD, new FieldMetaData("optional_bool_field", TFieldRequirementType.OPTIONAL, 
        new FieldValueMetaData(TType.BOOL)));
    tmpMetaDataMap.put(OPTIONAL_LIST_FIELD, new FieldMetaData("optional_list_field", TFieldRequirementType.OPTIONAL, 
        new ListMetaData(TType.LIST, 
            new FieldValueMetaData(TType.I32))));
    tmpMetaDataMap.put(OPTIONAL_STRUCT_FIELD, new FieldMetaData("optional_struct_field", TFieldRequirementType.OPTIONAL, 
        new StructMetaData(TType.STRUCT, EmptyStruct.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMetaDataMap);
  }

  static {
    FieldMetaData.addStructMetaDataMap(TestStruct.class, metaDataMap);
  }

  public TestStruct() {
  }

  public TestStruct(
      int unqualified_int_field,
      boolean unqualified_bool_field,
      List<Integer> unqualified_list_field,
      EmptyStruct unqualified_struct_field) {
    this();
    this.unqualified_int_field = unqualified_int_field;
    setUnqualified_int_fieldIsSet(true);
    this.unqualified_bool_field = unqualified_bool_field;
    setUnqualified_bool_fieldIsSet(true);
    this.unqualified_list_field = unqualified_list_field;
    this.unqualified_struct_field = unqualified_struct_field;
  }

  public TestStruct(
      int unqualified_int_field,
      boolean unqualified_bool_field,
      List<Integer> unqualified_list_field,
      EmptyStruct unqualified_struct_field,
      int optional_int_field,
      boolean optional_bool_field,
      List<Integer> optional_list_field,
      EmptyStruct optional_struct_field) {
    this();
    this.unqualified_int_field = unqualified_int_field;
    setUnqualified_int_fieldIsSet(true);
    this.unqualified_bool_field = unqualified_bool_field;
    setUnqualified_bool_fieldIsSet(true);
    this.unqualified_list_field = unqualified_list_field;
    this.unqualified_struct_field = unqualified_struct_field;
    this.optional_int_field = optional_int_field;
    setOptional_int_fieldIsSet(true);
    this.optional_bool_field = optional_bool_field;
    setOptional_bool_fieldIsSet(true);
    this.optional_list_field = optional_list_field;
    this.optional_struct_field = optional_struct_field;
  }

  public static class Builder {
    private int unqualified_int_field;
    private boolean unqualified_bool_field;
    private List<Integer> unqualified_list_field;
    private EmptyStruct unqualified_struct_field;
    private int optional_int_field;
    private boolean optional_bool_field;
    private List<Integer> optional_list_field;
    private EmptyStruct optional_struct_field;

    BitSet __optional_isset = new BitSet(4);

    public Builder() {
    }

    public Builder setUnqualified_int_field(final int unqualified_int_field) {
      this.unqualified_int_field = unqualified_int_field;
      __optional_isset.set(__UNQUALIFIED_INT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setUnqualified_bool_field(final boolean unqualified_bool_field) {
      this.unqualified_bool_field = unqualified_bool_field;
      __optional_isset.set(__UNQUALIFIED_BOOL_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setUnqualified_list_field(final List<Integer> unqualified_list_field) {
      this.unqualified_list_field = unqualified_list_field;
      return this;
    }

    public Builder setUnqualified_struct_field(final EmptyStruct unqualified_struct_field) {
      this.unqualified_struct_field = unqualified_struct_field;
      return this;
    }

    public Builder setOptional_int_field(final int optional_int_field) {
      this.optional_int_field = optional_int_field;
      __optional_isset.set(__OPTIONAL_INT_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setOptional_bool_field(final boolean optional_bool_field) {
      this.optional_bool_field = optional_bool_field;
      __optional_isset.set(__OPTIONAL_BOOL_FIELD_ISSET_ID, true);
      return this;
    }

    public Builder setOptional_list_field(final List<Integer> optional_list_field) {
      this.optional_list_field = optional_list_field;
      return this;
    }

    public Builder setOptional_struct_field(final EmptyStruct optional_struct_field) {
      this.optional_struct_field = optional_struct_field;
      return this;
    }

    public TestStruct build() {
      TestStruct result = new TestStruct();
      if (__optional_isset.get(__UNQUALIFIED_INT_FIELD_ISSET_ID)) {
        result.setUnqualified_int_field(this.unqualified_int_field);
      }
      if (__optional_isset.get(__UNQUALIFIED_BOOL_FIELD_ISSET_ID)) {
        result.setUnqualified_bool_field(this.unqualified_bool_field);
      }
      result.setUnqualified_list_field(this.unqualified_list_field);
      result.setUnqualified_struct_field(this.unqualified_struct_field);
      if (__optional_isset.get(__OPTIONAL_INT_FIELD_ISSET_ID)) {
        result.setOptional_int_field(this.optional_int_field);
      }
      if (__optional_isset.get(__OPTIONAL_BOOL_FIELD_ISSET_ID)) {
        result.setOptional_bool_field(this.optional_bool_field);
      }
      result.setOptional_list_field(this.optional_list_field);
      result.setOptional_struct_field(this.optional_struct_field);
      return result;
    }
  }

  public static Builder builder() {
    return new Builder();
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TestStruct(TestStruct other) {
    __isset_bit_vector.clear();
    __isset_bit_vector.or(other.__isset_bit_vector);
    this.unqualified_int_field = TBaseHelper.deepCopy(other.unqualified_int_field);
    this.unqualified_bool_field = TBaseHelper.deepCopy(other.unqualified_bool_field);
    if (other.isSetUnqualified_list_field()) {
      this.unqualified_list_field = TBaseHelper.deepCopy(other.unqualified_list_field);
    }
    if (other.isSetUnqualified_struct_field()) {
      this.unqualified_struct_field = TBaseHelper.deepCopy(other.unqualified_struct_field);
    }
    this.optional_int_field = TBaseHelper.deepCopy(other.optional_int_field);
    this.optional_bool_field = TBaseHelper.deepCopy(other.optional_bool_field);
    if (other.isSetOptional_list_field()) {
      this.optional_list_field = TBaseHelper.deepCopy(other.optional_list_field);
    }
    if (other.isSetOptional_struct_field()) {
      this.optional_struct_field = TBaseHelper.deepCopy(other.optional_struct_field);
    }
  }

  public TestStruct deepCopy() {
    return new TestStruct(this);
  }

  public int getUnqualified_int_field() {
    return this.unqualified_int_field;
  }

  public TestStruct setUnqualified_int_field(int unqualified_int_field) {
    this.unqualified_int_field = unqualified_int_field;
    setUnqualified_int_fieldIsSet(true);
    return this;
  }

  public void unsetUnqualified_int_field() {
    __isset_bit_vector.clear(__UNQUALIFIED_INT_FIELD_ISSET_ID);
  }

  // Returns true if field unqualified_int_field is set (has been assigned a value) and false otherwise
  public boolean isSetUnqualified_int_field() {
    return __isset_bit_vector.get(__UNQUALIFIED_INT_FIELD_ISSET_ID);
  }

  public void setUnqualified_int_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__UNQUALIFIED_INT_FIELD_ISSET_ID, __value);
  }

  public boolean isUnqualified_bool_field() {
    return this.unqualified_bool_field;
  }

  public TestStruct setUnqualified_bool_field(boolean unqualified_bool_field) {
    this.unqualified_bool_field = unqualified_bool_field;
    setUnqualified_bool_fieldIsSet(true);
    return this;
  }

  public void unsetUnqualified_bool_field() {
    __isset_bit_vector.clear(__UNQUALIFIED_BOOL_FIELD_ISSET_ID);
  }

  // Returns true if field unqualified_bool_field is set (has been assigned a value) and false otherwise
  public boolean isSetUnqualified_bool_field() {
    return __isset_bit_vector.get(__UNQUALIFIED_BOOL_FIELD_ISSET_ID);
  }

  public void setUnqualified_bool_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__UNQUALIFIED_BOOL_FIELD_ISSET_ID, __value);
  }

  public List<Integer> getUnqualified_list_field() {
    return this.unqualified_list_field;
  }

  public TestStruct setUnqualified_list_field(List<Integer> unqualified_list_field) {
    this.unqualified_list_field = unqualified_list_field;
    return this;
  }

  public void unsetUnqualified_list_field() {
    this.unqualified_list_field = null;
  }

  // Returns true if field unqualified_list_field is set (has been assigned a value) and false otherwise
  public boolean isSetUnqualified_list_field() {
    return this.unqualified_list_field != null;
  }

  public void setUnqualified_list_fieldIsSet(boolean __value) {
    if (!__value) {
      this.unqualified_list_field = null;
    }
  }

  public EmptyStruct getUnqualified_struct_field() {
    return this.unqualified_struct_field;
  }

  public TestStruct setUnqualified_struct_field(EmptyStruct unqualified_struct_field) {
    this.unqualified_struct_field = unqualified_struct_field;
    return this;
  }

  public void unsetUnqualified_struct_field() {
    this.unqualified_struct_field = null;
  }

  // Returns true if field unqualified_struct_field is set (has been assigned a value) and false otherwise
  public boolean isSetUnqualified_struct_field() {
    return this.unqualified_struct_field != null;
  }

  public void setUnqualified_struct_fieldIsSet(boolean __value) {
    if (!__value) {
      this.unqualified_struct_field = null;
    }
  }

  public int getOptional_int_field() {
    return this.optional_int_field;
  }

  public TestStruct setOptional_int_field(int optional_int_field) {
    this.optional_int_field = optional_int_field;
    setOptional_int_fieldIsSet(true);
    return this;
  }

  public void unsetOptional_int_field() {
    __isset_bit_vector.clear(__OPTIONAL_INT_FIELD_ISSET_ID);
  }

  // Returns true if field optional_int_field is set (has been assigned a value) and false otherwise
  public boolean isSetOptional_int_field() {
    return __isset_bit_vector.get(__OPTIONAL_INT_FIELD_ISSET_ID);
  }

  public void setOptional_int_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__OPTIONAL_INT_FIELD_ISSET_ID, __value);
  }

  public boolean isOptional_bool_field() {
    return this.optional_bool_field;
  }

  public TestStruct setOptional_bool_field(boolean optional_bool_field) {
    this.optional_bool_field = optional_bool_field;
    setOptional_bool_fieldIsSet(true);
    return this;
  }

  public void unsetOptional_bool_field() {
    __isset_bit_vector.clear(__OPTIONAL_BOOL_FIELD_ISSET_ID);
  }

  // Returns true if field optional_bool_field is set (has been assigned a value) and false otherwise
  public boolean isSetOptional_bool_field() {
    return __isset_bit_vector.get(__OPTIONAL_BOOL_FIELD_ISSET_ID);
  }

  public void setOptional_bool_fieldIsSet(boolean __value) {
    __isset_bit_vector.set(__OPTIONAL_BOOL_FIELD_ISSET_ID, __value);
  }

  public List<Integer> getOptional_list_field() {
    return this.optional_list_field;
  }

  public TestStruct setOptional_list_field(List<Integer> optional_list_field) {
    this.optional_list_field = optional_list_field;
    return this;
  }

  public void unsetOptional_list_field() {
    this.optional_list_field = null;
  }

  // Returns true if field optional_list_field is set (has been assigned a value) and false otherwise
  public boolean isSetOptional_list_field() {
    return this.optional_list_field != null;
  }

  public void setOptional_list_fieldIsSet(boolean __value) {
    if (!__value) {
      this.optional_list_field = null;
    }
  }

  public EmptyStruct getOptional_struct_field() {
    return this.optional_struct_field;
  }

  public TestStruct setOptional_struct_field(EmptyStruct optional_struct_field) {
    this.optional_struct_field = optional_struct_field;
    return this;
  }

  public void unsetOptional_struct_field() {
    this.optional_struct_field = null;
  }

  // Returns true if field optional_struct_field is set (has been assigned a value) and false otherwise
  public boolean isSetOptional_struct_field() {
    return this.optional_struct_field != null;
  }

  public void setOptional_struct_fieldIsSet(boolean __value) {
    if (!__value) {
      this.optional_struct_field = null;
    }
  }

  @SuppressWarnings("unchecked")
  public void setFieldValue(int fieldID, Object __value) {
    switch (fieldID) {
    case UNQUALIFIED_INT_FIELD:
      if (__value == null) {
        unsetUnqualified_int_field();
      } else {
        setUnqualified_int_field((Integer)__value);
      }
      break;

    case UNQUALIFIED_BOOL_FIELD:
      if (__value == null) {
        unsetUnqualified_bool_field();
      } else {
        setUnqualified_bool_field((Boolean)__value);
      }
      break;

    case UNQUALIFIED_LIST_FIELD:
      if (__value == null) {
        unsetUnqualified_list_field();
      } else {
        setUnqualified_list_field((List<Integer>)__value);
      }
      break;

    case UNQUALIFIED_STRUCT_FIELD:
      if (__value == null) {
        unsetUnqualified_struct_field();
      } else {
        setUnqualified_struct_field((EmptyStruct)__value);
      }
      break;

    case OPTIONAL_INT_FIELD:
      if (__value == null) {
        unsetOptional_int_field();
      } else {
        setOptional_int_field((Integer)__value);
      }
      break;

    case OPTIONAL_BOOL_FIELD:
      if (__value == null) {
        unsetOptional_bool_field();
      } else {
        setOptional_bool_field((Boolean)__value);
      }
      break;

    case OPTIONAL_LIST_FIELD:
      if (__value == null) {
        unsetOptional_list_field();
      } else {
        setOptional_list_field((List<Integer>)__value);
      }
      break;

    case OPTIONAL_STRUCT_FIELD:
      if (__value == null) {
        unsetOptional_struct_field();
      } else {
        setOptional_struct_field((EmptyStruct)__value);
      }
      break;

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  public Object getFieldValue(int fieldID) {
    switch (fieldID) {
    case UNQUALIFIED_INT_FIELD:
      return new Integer(getUnqualified_int_field());

    case UNQUALIFIED_BOOL_FIELD:
      return new Boolean(isUnqualified_bool_field());

    case UNQUALIFIED_LIST_FIELD:
      return getUnqualified_list_field();

    case UNQUALIFIED_STRUCT_FIELD:
      return getUnqualified_struct_field();

    case OPTIONAL_INT_FIELD:
      return new Integer(getOptional_int_field());

    case OPTIONAL_BOOL_FIELD:
      return new Boolean(isOptional_bool_field());

    case OPTIONAL_LIST_FIELD:
      return getOptional_list_field();

    case OPTIONAL_STRUCT_FIELD:
      return getOptional_struct_field();

    default:
      throw new IllegalArgumentException("Field " + fieldID + " doesn't exist!");
    }
  }

  @Override
  public boolean equals(Object _that) {
    if (_that == null)
      return false;
    if (this == _that)
      return true;
    if (!(_that instanceof TestStruct))
      return false;
    TestStruct that = (TestStruct)_that;

    if (!TBaseHelper.equalsNobinary(this.unqualified_int_field, that.unqualified_int_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.unqualified_bool_field, that.unqualified_bool_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnqualified_list_field(), that.isSetUnqualified_list_field(), this.unqualified_list_field, that.unqualified_list_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetUnqualified_struct_field(), that.isSetUnqualified_struct_field(), this.unqualified_struct_field, that.unqualified_struct_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptional_int_field(), that.isSetOptional_int_field(), this.optional_int_field, that.optional_int_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptional_bool_field(), that.isSetOptional_bool_field(), this.optional_bool_field, that.optional_bool_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptional_list_field(), that.isSetOptional_list_field(), this.optional_list_field, that.optional_list_field)) { return false; }

    if (!TBaseHelper.equalsNobinary(this.isSetOptional_struct_field(), that.isSetOptional_struct_field(), this.optional_struct_field, that.optional_struct_field)) { return false; }

    return true;
  }

  @Override
  public int hashCode() {
    return Arrays.deepHashCode(new Object[] {unqualified_int_field, unqualified_bool_field, unqualified_list_field, unqualified_struct_field, optional_int_field, optional_bool_field, optional_list_field, optional_struct_field});
  }

  @Override
  public int compareTo(TestStruct other) {
    if (other == null) {
      // See java.lang.Comparable docs
      throw new NullPointerException();
    }

    if (other == this) {
      return 0;
    }
    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetUnqualified_int_field()).compareTo(other.isSetUnqualified_int_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(unqualified_int_field, other.unqualified_int_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetUnqualified_bool_field()).compareTo(other.isSetUnqualified_bool_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(unqualified_bool_field, other.unqualified_bool_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetUnqualified_list_field()).compareTo(other.isSetUnqualified_list_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(unqualified_list_field, other.unqualified_list_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetUnqualified_struct_field()).compareTo(other.isSetUnqualified_struct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(unqualified_struct_field, other.unqualified_struct_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptional_int_field()).compareTo(other.isSetOptional_int_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optional_int_field, other.optional_int_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptional_bool_field()).compareTo(other.isSetOptional_bool_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optional_bool_field, other.optional_bool_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptional_list_field()).compareTo(other.isSetOptional_list_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optional_list_field, other.optional_list_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    lastComparison = Boolean.valueOf(isSetOptional_struct_field()).compareTo(other.isSetOptional_struct_field());
    if (lastComparison != 0) {
      return lastComparison;
    }
    lastComparison = TBaseHelper.compareTo(optional_struct_field, other.optional_struct_field);
    if (lastComparison != 0) { 
      return lastComparison;
    }
    return 0;
  }

  public void read(TProtocol iprot) throws TException {
    TField __field;
    iprot.readStructBegin(metaDataMap);
    while (true)
    {
      __field = iprot.readFieldBegin();
      if (__field.type == TType.STOP) {
        break;
      }
      switch (__field.id)
      {
        case UNQUALIFIED_INT_FIELD:
          if (__field.type == TType.I32) {
            this.unqualified_int_field = iprot.readI32();
            setUnqualified_int_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNQUALIFIED_BOOL_FIELD:
          if (__field.type == TType.BOOL) {
            this.unqualified_bool_field = iprot.readBool();
            setUnqualified_bool_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNQUALIFIED_LIST_FIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list0 = iprot.readListBegin();
              this.unqualified_list_field = new ArrayList<Integer>(Math.max(0, _list0.size));
              for (int _i1 = 0; 
                   (_list0.size < 0) ? iprot.peekList() : (_i1 < _list0.size); 
                   ++_i1)
              {
                int _elem2;
                _elem2 = iprot.readI32();
                this.unqualified_list_field.add(_elem2);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case UNQUALIFIED_STRUCT_FIELD:
          if (__field.type == TType.STRUCT) {
            this.unqualified_struct_field = new EmptyStruct();
            this.unqualified_struct_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONAL_INT_FIELD:
          if (__field.type == TType.I32) {
            this.optional_int_field = iprot.readI32();
            setOptional_int_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONAL_BOOL_FIELD:
          if (__field.type == TType.BOOL) {
            this.optional_bool_field = iprot.readBool();
            setOptional_bool_fieldIsSet(true);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONAL_LIST_FIELD:
          if (__field.type == TType.LIST) {
            {
              TList _list3 = iprot.readListBegin();
              this.optional_list_field = new ArrayList<Integer>(Math.max(0, _list3.size));
              for (int _i4 = 0; 
                   (_list3.size < 0) ? iprot.peekList() : (_i4 < _list3.size); 
                   ++_i4)
              {
                int _elem5;
                _elem5 = iprot.readI32();
                this.optional_list_field.add(_elem5);
              }
              iprot.readListEnd();
            }
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        case OPTIONAL_STRUCT_FIELD:
          if (__field.type == TType.STRUCT) {
            this.optional_struct_field = new EmptyStruct();
            this.optional_struct_field.read(iprot);
          } else {
            TProtocolUtil.skip(iprot, __field.type);
          }
          break;
        default:
          TProtocolUtil.skip(iprot, __field.type);
          break;
      }
      iprot.readFieldEnd();
    }
    iprot.readStructEnd();


    // check for required fields of primitive type, which can't be checked in the validate method
    validate();
  }

  public void write(TProtocol oprot) throws TException {
    validate();

    oprot.writeStructBegin(STRUCT_DESC);
    oprot.writeFieldBegin(UNQUALIFIED_INT_FIELD_FIELD_DESC);
    oprot.writeI32(this.unqualified_int_field);
    oprot.writeFieldEnd();
    oprot.writeFieldBegin(UNQUALIFIED_BOOL_FIELD_FIELD_DESC);
    oprot.writeBool(this.unqualified_bool_field);
    oprot.writeFieldEnd();
    if (this.unqualified_list_field != null) {
      oprot.writeFieldBegin(UNQUALIFIED_LIST_FIELD_FIELD_DESC);
      {
        oprot.writeListBegin(new TList(TType.I32, this.unqualified_list_field.size()));
        for (int _iter6 : this.unqualified_list_field)        {
          oprot.writeI32(_iter6);
        }
        oprot.writeListEnd();
      }
      oprot.writeFieldEnd();
    }
    if (this.unqualified_struct_field != null) {
      oprot.writeFieldBegin(UNQUALIFIED_STRUCT_FIELD_FIELD_DESC);
      this.unqualified_struct_field.write(oprot);
      oprot.writeFieldEnd();
    }
    if (isSetOptional_int_field()) {
      oprot.writeFieldBegin(OPTIONAL_INT_FIELD_FIELD_DESC);
      oprot.writeI32(this.optional_int_field);
      oprot.writeFieldEnd();
    }
    if (isSetOptional_bool_field()) {
      oprot.writeFieldBegin(OPTIONAL_BOOL_FIELD_FIELD_DESC);
      oprot.writeBool(this.optional_bool_field);
      oprot.writeFieldEnd();
    }
    if (this.optional_list_field != null) {
      if (isSetOptional_list_field()) {
        oprot.writeFieldBegin(OPTIONAL_LIST_FIELD_FIELD_DESC);
        {
          oprot.writeListBegin(new TList(TType.I32, this.optional_list_field.size()));
          for (int _iter7 : this.optional_list_field)          {
            oprot.writeI32(_iter7);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
    }
    if (this.optional_struct_field != null) {
      if (isSetOptional_struct_field()) {
        oprot.writeFieldBegin(OPTIONAL_STRUCT_FIELD_FIELD_DESC);
        this.optional_struct_field.write(oprot);
        oprot.writeFieldEnd();
      }
    }
    oprot.writeFieldStop();
    oprot.writeStructEnd();
  }

  @Override
  public String toString() {
    return toString(1, true);
  }

  @Override
  public String toString(int indent, boolean prettyPrint) {
    String indentStr = prettyPrint ? TBaseHelper.getIndentedString(indent) : "";
    String newLine = prettyPrint ? "\n" : "";
    String space = prettyPrint ? " " : "";
    StringBuilder sb = new StringBuilder("TestStruct");
    sb.append(space);
    sb.append("(");
    sb.append(newLine);
    boolean first = true;

    sb.append(indentStr);
    sb.append("unqualified_int_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.getUnqualified_int_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("unqualified_bool_field");
    sb.append(space);
    sb.append(":").append(space);
    sb.append(TBaseHelper.toString(this.isUnqualified_bool_field(), indent + 1, prettyPrint));
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("unqualified_list_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnqualified_list_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnqualified_list_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (!first) sb.append("," + newLine);
    sb.append(indentStr);
    sb.append("unqualified_struct_field");
    sb.append(space);
    sb.append(":").append(space);
    if (this.getUnqualified_struct_field() == null) {
      sb.append("null");
    } else {
      sb.append(TBaseHelper.toString(this.getUnqualified_struct_field(), indent + 1, prettyPrint));
    }
    first = false;
    if (isSetOptional_int_field())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optional_int_field");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.getOptional_int_field(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetOptional_bool_field())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optional_bool_field");
      sb.append(space);
      sb.append(":").append(space);
      sb.append(TBaseHelper.toString(this.isOptional_bool_field(), indent + 1, prettyPrint));
      first = false;
    }
    if (isSetOptional_list_field())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optional_list_field");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getOptional_list_field() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getOptional_list_field(), indent + 1, prettyPrint));
      }
      first = false;
    }
    if (isSetOptional_struct_field())
    {
      if (!first) sb.append("," + newLine);
      sb.append(indentStr);
      sb.append("optional_struct_field");
      sb.append(space);
      sb.append(":").append(space);
      if (this.getOptional_struct_field() == null) {
        sb.append("null");
      } else {
        sb.append(TBaseHelper.toString(this.getOptional_struct_field(), indent + 1, prettyPrint));
      }
      first = false;
    }
    sb.append(newLine + TBaseHelper.reduceIndent(indentStr));
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws TException {
    // check for required fields
  }

}

