// @generated by Thrift for thrift/compiler/test/fixtures/adapter/src/module.thrift
// This file is probably not the place you want to edit!

//! Thrift constant definitions for `module`.

pub const var1: ::std::primitive::i32 = 10;

pub const var2: &::std::primitive::str = "20";

pub static var3: ::std::sync::LazyLock<crate::types::MyStruct> = ::std::sync::LazyLock::new(|| crate::types::MyStruct {
            field: 30,
            set_string: <crate::types::adapters::SetWithAdapter as ::fbthrift::adapter::ThriftAdapter>::from_thrift_default::<crate::types::MyStruct>({
                let mut set = ::std::collections::BTreeSet::new();
                set.insert("10".to_owned());
                set.insert("20".to_owned());
                set
            }, 2),
            ..::std::default::Default::default()
        });

pub const var4: ::std::primitive::i32 = 40;

pub const var5: &::std::primitive::str = "50";

pub static var6: ::std::sync::LazyLock<crate::types::MyStruct> = ::std::sync::LazyLock::new(|| crate::types::MyStruct {
            field: 60,
            set_string: <crate::types::adapters::SetWithAdapter as ::fbthrift::adapter::ThriftAdapter>::from_thrift_default::<crate::types::MyStruct>({
                let mut set = ::std::collections::BTreeSet::new();
                set.insert("30".to_owned());
                set.insert("40".to_owned());
                set
            }, 2),
            ..::std::default::Default::default()
        });

pub const timeout: ::std::primitive::i32 = 42;

pub const msg: &::std::primitive::str = "hello, world";

pub static person: ::std::sync::LazyLock<crate::types::Person2> = ::std::sync::LazyLock::new(|| crate::types::Person2 {
            name: "DefaultName".to_owned(),
            ..::std::default::Default::default()
        });

pub const timeout_no_transitive: ::std::primitive::i32 = 420;

pub const msg_no_transitive: &::std::primitive::str = "hello, world 2";

pub static person_no_transitive: ::std::sync::LazyLock<crate::types::Person2> = ::std::sync::LazyLock::new(|| crate::types::Person2 {
            name: "DefaultName 2".to_owned(),
            ..::std::default::Default::default()
        });

pub const type_adapted: crate::types::AdaptedBool = true;

pub static nested_adapted: ::std::sync::LazyLock<crate::types::MoveOnly> = ::std::sync::LazyLock::new(|| crate::types::MoveOnly {
            ptr: crate::types::HeapAllocated {
                ..::std::default::Default::default()
            },
            ..::std::default::Default::default()
        });

pub static container_of_adapted: ::std::sync::LazyLock<::std::vec::Vec<crate::types::AdaptedByte>> = ::std::sync::LazyLock::new(|| vec![
            1,
            2,
            3,
        ]);

